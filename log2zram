#!/bin/bash

. /etc/log2zram.conf

HDD_LOG=/var/hdd.log
ZRAM_LOG=/var/log

LOG_NAME="/usr/local/bin/log2zram/log2zram.log"


isSafe () {
	[ -d $HDD_LOG/ ] || echo "ERROR: $HDD_LOG/ doesn't exist! Can't sync." >> $LOG_NAME
	[ -d $HDD_LOG/ ] || exit 1
}

syncToDisk () {
	isSafe
	rsync -a $RAM_LOG/ $HDD_LOG/ 2>&1 | tee $LOG_NAME

}

syncFromDisk () {
	isSafe
	if [ ! -z "$(du -sh -t "$SIZE" $HDD_LOG/ | cut -f1)" ]; then
		echo "ERROR: RAM disk too small. Can't sync." >> $LOG_NAME
		umount -l $RAM_LOG/
		umount -l $HDD_LOG/
		exit 1
	fi
	rsync -a --exclude 'oldlog'  $HDD_LOG/ $RAM_LOG/ 2>&1 | tee $LOG_NAME
}

wait_for () {
	while ! grep -qs "$1" /proc/mounts; do
		sleep 0.1
	done
}

createZramLogDrive () {
	# Check Zram Class created
	if [ ! -d "/sys/class/zram-control" ]; then
		modprobe zram
		RAM_DEV='0'
	else
		RAM_DEV=$(cat /sys/class/zram-control/hot_add)
	fi
	echo ${COMP_ALG} > /sys/block/zram${RAM_DEV}/comp_algorithm
	echo ${LOG_DISK_SIZE} > /sys/block/zram${RAM_DEV}/disksize
	echo ${SIZE} > /sys/block/zram${RAM_DEV}/mem_limit
	mke2fs -t ext4 /dev/zram${RAM_DEV}
}

getUsage () {
	if [ "$ZL2R" = true ]; then
		USAGE=$(zramctl -b | grep /var/log | awk '{ print $5 }')
	else
		USAGE=$(df "/var/log" | tail -1 | awk '{ print $3 }')
	fi
}

toBytes() {
	echo $1 | echo $((`sed 's/.*/\L\0/;s/t/Xg/;s/g/Xm/;s/m/Xk/;s/k/X/;s/b//;s/X/ *1024/g'`))
}

pruneOldLog() {
	isSafe
	getUsage
	PRUNE_BYTES=$(toBytes ${PRUNE_LEVEL})
	MEM_SIZE=$(toBytes ${SIZE})
	LOG_REMAINING=$(( ${MEM_SIZE} - ${USAGE} ))
	if [ "$LOG_REMAINING" -lt "$PRUNE_BYTES" ];then
			rsync -aXWv --delete --links $RAM_LOG/oldlog/ $HDD_LOG/oldlog/ 2>&1 | $LOG_OUTPUT
			rm -rf $RAM_LOG/oldlog/* 2>&1 | $LOG_OUTPUT
	fi
	
}

case "$1" in
	start)
		[ -d $HDD_LOG/ ] || mkdir $HDD_LOG/
		mount --bind $RAM_LOG/ $HDD_LOG/
		mount --make-private $HDD_LOG/
		wait_for $HDD_LOG
		createZramLogDrive
		mount -t ext4 -o nosuid,noexec,nodev,user=log2ram /dev/zram${RAM_DEV} ${RAM_LOG}/
		wait_for $RAM_LOG
		syncFromDisk
		;;

	stop)
		syncToDisk
		#ZRAM_LOG=$(awk '$2 == "/var/log" {print $1}' /proc/mounts)
		#ZRAM_LOG=$(echo ${ZRAM_LOG} | grep -o -E '[0-9]+')
		umount -l $RAM_LOG/
		umount -l $HDD_LOG/
		# Unsure as even with Root permision denied
		#echo ${ZRAM_LOG} > /sys/class/zram-control/hot_remove
		;;

	write)
		pruneOldLog
		#syncToDisk
		;;

	*)
		echo "Usage: log2ram {start|stop|write}" >&2
		exit 1
	;;
esac
